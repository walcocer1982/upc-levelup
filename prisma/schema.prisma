generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(cuid())
  email                String         @unique
  nombres              String?
  apellidos            String?
  dni                  String?        @unique
  telefono             String?
  correoLaureate       String?
  linkedin             String?
  biografia            String?
  role                 Role           @default(usuario)
  haAceptadoPolitica   Boolean        @default(false)
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  isRegistered         Boolean        @default(false)
  convocatoriasCreadas Application[]  @relation("ConvocatoriaCreador")
  comunicaciones       Comunicacion[]
  startups             Member[]
  sessionLogs          SessionLog[]

  @@index([email])
  @@index([role])
  @@map("users")
}

model SessionLog {
  id        String   @id @default(cuid())
  userId    String
  email     String?
  action    String
  provider  String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@map("session_logs")
}

model Startup {
  id               String            @id @default(cuid())
  nombre           String
  razonSocial      String?
  ruc              String?
  fechaFundacion   DateTime
  categoria        String
  paginaWeb        String?
  descripcion      String
  etapa            String
  origen           String
  videoPitchUrl    String?
  postulaciones    Applicant[]
  applicationForms ApplicationForm[]
  comunicaciones   Comunicacion[]
  impact           Impact?
  members          Member[]
  metrics          Metrics?

  @@index([nombre])
  @@index([etapa])
  @@index([categoria])
  @@map("startups")
}

model Impact {
  id                    String  @id @default(cuid())
  startupId             String  @unique
  casoReal              String
  abordajeProblema      String
  consecuencias         String
  afectados             String
  tamanoMercado         String
  potencialesClientes   String
  interesPagar          String
  segmentoInteres       String
  estrategiaAdquisicion String
  costoAdquisicion      String
  facilidadExpansion    String
  escalabilidad         String
  trayectoria           String
  experiencia           String
  roles                 String
  desafios              String
  startup               Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
  @@map("impacts")
}

model Metrics {
  id               String  @id @default(cuid())
  startupId        String  @unique
  ventas           Boolean
  montoVentas      Int?
  monedaVentas     String?
  tienePiloto      Boolean
  enlacePiloto     String?
  lugarAplicacion  String?
  tecnologia       String?
  tieneAreaTech    Boolean
  inversionExterna Boolean
  montoInversion   Int?
  monedaInversion  String?
  startup          Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
  @@map("metrics")
}

model Member {
  id        String  @id @default(cuid())
  nombres   String
  apellidos String
  dni       String
  email     String
  telefono  String
  linkedin  String?
  biografia String?
  rol       String
  aceptado  Boolean @default(false)
  startupId String
  user      User    @relation(fields: [dni], references: [dni])
  startup   Startup @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@unique([dni, startupId])
  @@index([startupId])
  @@index([dni])
  @@index([email])
  @@map("members")
}

model Application {
  id            String            @id @default(cuid())
  tipo          TipoConvocatoria
  fechaInicio   DateTime
  fechaFin      DateTime
  creadoPorId   String
  postulaciones Applicant[]
  formularios   ApplicationForm[]
  creadoPor     User              @relation("ConvocatoriaCreador", fields: [creadoPorId], references: [id])

  @@index([tipo])
  @@index([fechaInicio, fechaFin])
  @@index([creadoPorId])
  @@map("applications")
}

model ApplicationForm {
  id                  String      @id @default(cuid())
  startupId           String
  convocatoriaId      String
  solucion            String
  razon               String
  necesidades         String[]
  participacionPasada Boolean
  programaPasado      String?
  aprendizaje         String?
  startupNombre       String
  pregunta            String?
  respuesta           String?
  categoria           String?
  peso                Int?        @default(1)
  orden               Int?        @default(0)
  convocatoria        Application @relation(fields: [convocatoriaId], references: [id], onDelete: Cascade)
  startup             Startup     @relation(fields: [startupId], references: [id], onDelete: Cascade)

  @@index([startupId])
  @@index([convocatoriaId])
  @@index([categoria])
  @@map("application_forms")
}

model Applicant {
  id                String            @id @default(cuid())
  startupId         String
  convocatoriaId    String
  estado            EstadoPostulacion
  feedbackEvaluador String?
  feedbackIA        String?
  fecha             DateTime          @default(now())
  locked            Boolean           @default(false)
  convocatoria      Application       @relation(fields: [convocatoriaId], references: [id], onDelete: Cascade)
  startup           Startup           @relation(fields: [startupId], references: [id], onDelete: Cascade)
  evaluaciones      EvaluacionIA[]

  @@unique([startupId, convocatoriaId])
  @@index([estado])
  @@index([fecha])
  @@map("applicants")
}

model EvaluacionIA {
  id                 String               @id @default(cuid())
  postulacionId      String
  estado             String
  modelVersion       String
  confianza          Float
  puntajeTotal       Float
  analisis           Json?
  metadata           Json?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  version            Int                  @default(1)
  criteriosEvaluados CriterioEvaluacion[]
  postulacion        Applicant            @relation(fields: [postulacionId], references: [id], onDelete: Cascade)

  @@index([postulacionId])
  @@index([estado])
  @@index([createdAt])
  @@map("evaluaciones_ia")
}

model CriterioEvaluacion {
  id                 String       @id @default(cuid())
  evaluacionId       String
  criterioId         String
  categoria          String
  puntajeOriginal    Int
  puntajeNormalizado Float
  justificacion      String
  recomendaciones    String?
  confianza          Float
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  version            Int          @default(1)
  evaluacion         EvaluacionIA @relation(fields: [evaluacionId], references: [id], onDelete: Cascade)

  @@index([evaluacionId])
  @@index([categoria])
  @@map("criterios_evaluacion")
}

model Convocatoria {
  id          String   @id @default(cuid())
  titulo      String
  descripcion String
  fechaInicio DateTime
  fechaFin    DateTime
  estado      String
  criterios   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([estado])
  @@index([fechaInicio, fechaFin])
  @@map("convocatorias")
}

model Comunicacion {
  id        String           @id @default(cuid())
  userId    String
  startupId String
  asunto    String
  cuerpo    String
  fecha     DateTime         @default(now())
  tipo      TipoComunicacion
  startup   Startup          @relation(fields: [startupId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([startupId])
  @@index([fecha])
  @@index([tipo])
  @@map("comunicaciones")
}

enum Role {
  usuario
  admin
}

enum TipoConvocatoria {
  Inqubalab
  Aceleracion
}

enum EstadoPostulacion {
  postulado
  aprobado
  desaprobado
  enRevision
}

enum TipoComunicacion {
  notificacion
  recordatorio
  estado_postulacion
}
